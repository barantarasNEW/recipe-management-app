{"version":3,"file":"static/js/973.39495b6e.chunk.js","mappings":"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","sources":["components/Loader/Loader.tsx","helpers/getSearchWith.ts","components/Search/Search.tsx","components/RecipesList/RecipesList.tsx","context/Liked.ts","hooks/useRedux.ts","pages/Recipes/Recipes.tsx"],"sourcesContent":["import { createPortal } from \"react-dom\";\nimport './Loader.scss';\n\nconst Loader = () => {\n  return (\n    <>\n      {createPortal(\n        (\n          <div className=\"lds-ellipsis\">\n          <div />\n          <div />\n          <div />\n          <div />\n        </div>\n        ),\n        document.getElementById('portal') as HTMLElement\n      )}\n  </>\n  );\n};\n\nexport default Loader;","export type SearchParams = {\n  [key: string]: string | null;\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams\n) {\n  const newParams = new URLSearchParams(currentParams.toString());\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n};","import { ChangeEvent, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../../helpers/getSearchWith';\nimport './Search.scss';\n\nconst Search = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, { query: e.target.value || null })\n    );\n  };\n\n  const onClickCancel = () => {\n    setSearchParams(\n      getSearchWith(searchParams, { query: null })\n    );\n\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"search\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        className=\"search__input\"\n        value={query}\n        placeholder=\"Search...\"\n        onChange={onChange}\n      />\n\n      {!!query.length && (\n        <button className=\"search__btn\" onClick={onClickCancel}>\n          <img\n            className=\"search__icon\"\n            src=\"./assets/icons/cancel.svg\"\n            alt=\"icon\"\n          />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Search;","import { useContext, useDeferredValue, useEffect, useMemo } from \"react\";\nimport { Link, useNavigate, useSearchParams } from \"react-router-dom\";\nimport * as RecipesActions from '../../redux/slices/recipesSlice'; \nimport Search from \"../../components/Search/Search\";\nimport Loader from \"../../components/Loader/Loader\";\nimport { Liked } from \"../../context/Liked\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks/useRedux\";\nimport { Recipe } from \"../../types/Recipe\";\nimport './RecipesList.scss';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\ntype Props = {\n  recipes: Recipe[];\n  loading?: boolean;\n  error?: string;\n}\n\nconst RecipesList: React.FC<Props> = ({ recipes, loading, error }) => {\n  const dispatch = useAppDispatch();\n  const { email } = useAppSelector(state => state.user).user;\n  const { liked, changeLikeRecipe } = useContext(Liked);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const deferredQuery = useDeferredValue(query);\n  const navigate = useNavigate();\n\n  const isSigned = email.length;\n  const findRecipe = (id: number) => {\n    if (isSigned) {\n      return liked.find(currLiked => currLiked.id === id);\n    }\n  };\n\n  const visibleRecipes = useMemo(() =>  {\n    if (!deferredQuery.length) {\n      return recipes;\n    }\n\n    const reg = new RegExp(`${deferredQuery}.+$`, 'ig');\n\n    return recipes.filter(recipe => {\n      return recipe.name.search(reg) !== -1;\n    });\n  }, [deferredQuery, recipes]);\n\n  const onClickLike = (recipe: Recipe) => {\n    if (!isSigned) {\n      navigate(\"/signIn\");\n\n      return;\n    }\n\n    changeLikeRecipe(recipe);\n  };\n\n  useEffect(() => {\n    dispatch(RecipesActions.init());\n  }, [dispatch]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return <p>Error...</p>;\n  }\n\n  if (!recipes.length) {\n    return <p>Recipes not found</p>\n  }\n\n  return (\n    <div className=\"recipes-list\">\n      <div className=\"container\">\n        <div className=\"recipes-list__wrapper\">\n          <Search />\n\n          <ul>\n            <TransitionGroup className=\"recipes-list__list\">\n              {visibleRecipes.map((recipe) => (\n                <CSSTransition\n                  key={recipe.id}\n                  timeout={500}\n                  classNames=\"item\"\n                >\n                  <li className=\"recipes-list__item\">\n                    <h2 className=\"recipes-list__title\">\n                      {recipe.name}\n                    </h2>\n\n                    <img\n                      className=\"recipes-list__img\"\n                      src={recipe.img}\n                      alt=\"product\"\n                    />\n      \n                    <div className=\"recipes-list__btns\">\n                      <Link to={`/recipes/${recipe.id}`} className=\"btn\">\n                        Recipe\n                      </Link>\n      \n                      <button onClick={() => onClickLike(recipe)}>\n                        <img\n                          className=\"recipes-list__icon\"\n                          src={`./assets/icons/${findRecipe(recipe.id) ? \"heart-active.svg\" : \"heart.svg\"}`}\n                          alt=\"icon\"\n                        />\n                      </button>\n      \n                      <Link\n                        to={isSigned\n                          ? `/recipes/${recipe.id}/start`\n                          : \"/signIn\"}\n                      >\n                        <img\n                          className=\"recipes-list__icon\"\n                          src=\"./assets/icons/start.svg\"\n                          alt=\"icon\"\n                        />\n                      </Link>\n                    </div>\n\n                    <div className=\"recipes-list__stars\">\n                      <ul className=\"recipes-list__stars__list\">\n                        <li className=\"recipes-list__stars__item\"></li>\n                      </ul>\n                    </div>\n                  </li>\n                </CSSTransition>              \n              ))}\n            </TransitionGroup>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RecipesList;","import { createContext } from \"react\";\nimport { Recipe } from \"../types/Recipe\";\n\ntype Context = {\n  liked: Recipe[],\n  changeLikeRecipe: (recipe: Recipe) => void;\n  // delRecipe: (id: number) => void;\n};\n\nexport const Liked = createContext<Context>({\n  liked: [],\n  changeLikeRecipe: () => {},\n  // delRecipe: () => {},\n});","import { useDispatch, useSelector } from 'react-redux'\nimport type { TypedUseSelectorHook } from 'react-redux'\nimport { AppDispatch, RootState } from '../redux/store'\n\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { useEffect } from \"react\";\nimport * as RecipesActions from '../../redux/slices/recipesSlice'; \nimport RecipesList from \"../../components/RecipesList/RecipesList\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks/useRedux\";\nimport './Recipes.scss';\n\nconst Recipes = () => {\n  const dispatch = useAppDispatch();\n  const { recipes, loading, error } = useAppSelector(state => state.recipes);\n\n  useEffect(() => {\n    dispatch(RecipesActions.init());\n  }, [dispatch]);\n\n  return (\n    <section className=\"page__section recipes\">\n      <div className=\"container\">\n        <div className=\"recipes__wrapper\">\n          <RecipesList\n            recipes={recipes}\n            loading={loading}\n            error={error}\n          />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Recipes;"],"names":["_jsx","_Fragment","children","createPortal","_jsxs","className","document","getElementById","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","_ref","_ref2","_slicedToArray","key","value","delete","set","inputRef","useRef","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","ref","type","placeholder","onChange","e","target","length","onClick","_inputRef$current","current","focus","src","alt","recipes","loading","error","dispatch","useAppDispatch","email","useAppSelector","state","user","_useContext","useContext","Liked","liked","changeLikeRecipe","deferredQuery","useDeferredValue","navigate","useNavigate","isSigned","findRecipe","id","find","currLiked","visibleRecipes","useMemo","reg","RegExp","concat","filter","recipe","name","search","useEffect","RecipesActions","Loader","Search","TransitionGroup","map","CSSTransition","timeout","classNames","img","Link","to","onClickLike","createContext","useDispatch","useSelector","_useAppSelector","RecipesList"],"sourceRoot":""}